//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Workflow.BLL
{
    
    
    public partial class CommandBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Command, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ICommandBLL
    {
        
		partial void Initialize();
        
        public CommandBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Command> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class CommandBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ICommandBLL, Framework.Workflow.BLL.CommandBLL, Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.BLL.ICommandBLLFactory
    {
        
        public CommandBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class CommandEventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.CommandEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ICommandEventBLL
    {
        
		partial void Initialize();
        
        public CommandEventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.CommandEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class CommandEventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ICommandEventBLL, Framework.Workflow.BLL.CommandEventBLL, Framework.Workflow.Domain.Definition.CommandEvent>, Framework.Workflow.BLL.ICommandEventBLLFactory
    {
        
        public CommandEventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ConditionStateBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.ConditionState, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IConditionStateBLL
    {
        
		partial void Initialize();
        
        public ConditionStateBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.ConditionState> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ConditionStateBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IConditionStateBLL, Framework.Workflow.BLL.ConditionStateBLL, Framework.Workflow.Domain.Definition.ConditionState>, Framework.Workflow.BLL.IConditionStateBLLFactory
    {
        
        public ConditionStateBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ConditionStateEventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.ConditionStateEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IConditionStateEventBLL
    {
        
		partial void Initialize();
        
        public ConditionStateEventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.ConditionStateEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ConditionStateEventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IConditionStateEventBLL, Framework.Workflow.BLL.ConditionStateEventBLL, Framework.Workflow.Domain.Definition.ConditionStateEvent>, Framework.Workflow.BLL.IConditionStateEventBLLFactory
    {
        
        public ConditionStateEventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class DomainTypeBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.DomainType, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IDomainTypeBLL
    {
        
		partial void Initialize();
        
        public DomainTypeBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.DomainType> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class DomainTypeBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IDomainTypeBLL, Framework.Workflow.BLL.DomainTypeBLL, Framework.Workflow.Domain.Definition.DomainType>, Framework.Workflow.BLL.IDomainTypeBLLFactory
    {
        
        public DomainTypeBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class EventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Event, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IEventBLL
    {
        
		partial void Initialize();
        
        public EventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Event> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class EventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IEventBLL, Framework.Workflow.BLL.EventBLL, Framework.Workflow.Domain.Definition.Event>, Framework.Workflow.BLL.IEventBLLFactory
    {
        
        public EventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ParallelStateBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.ParallelState, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IParallelStateBLL
    {
        
		partial void Initialize();
        
        public ParallelStateBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.ParallelState> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ParallelStateBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IParallelStateBLL, Framework.Workflow.BLL.ParallelStateBLL, Framework.Workflow.Domain.Definition.ParallelState>, Framework.Workflow.BLL.IParallelStateBLLFactory
    {
        
        public ParallelStateBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ParallelStateFinalEventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IParallelStateFinalEventBLL
    {
        
		partial void Initialize();
        
        public ParallelStateFinalEventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.ParallelStateFinalEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ParallelStateFinalEventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IParallelStateFinalEventBLL, Framework.Workflow.BLL.ParallelStateFinalEventBLL, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>, Framework.Workflow.BLL.IParallelStateFinalEventBLLFactory
    {
        
        public ParallelStateFinalEventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class RoleBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Role, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IRoleBLL
    {
        
		partial void Initialize();
        
        public RoleBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Role> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class RoleBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IRoleBLL, Framework.Workflow.BLL.RoleBLL, Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.BLL.IRoleBLLFactory
    {
        
        public RoleBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StartWorkflowDomainObjectConditionBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL
    {
        
		partial void Initialize();
        
        public StartWorkflowDomainObjectConditionBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StartWorkflowDomainObjectConditionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL, Framework.Workflow.BLL.StartWorkflowDomainObjectConditionBLL, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLLFactory
    {
        
        public StartWorkflowDomainObjectConditionBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StateBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.State, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStateBLL
    {
        
		partial void Initialize();
        
        public StateBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.State> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StateBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStateBLL, Framework.Workflow.BLL.StateBLL, Framework.Workflow.Domain.Definition.State>, Framework.Workflow.BLL.IStateBLLFactory
    {
        
        public StateBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StateBaseBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.StateBase, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStateBaseBLL
    {
        
		partial void Initialize();
        
        public StateBaseBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.StateBase> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StateBaseBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStateBaseBLL, Framework.Workflow.BLL.StateBaseBLL, Framework.Workflow.Domain.Definition.StateBase>, Framework.Workflow.BLL.IStateBaseBLLFactory
    {
        
        public StateBaseBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StateDomainObjectEventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.StateDomainObjectEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStateDomainObjectEventBLL
    {
        
		partial void Initialize();
        
        public StateDomainObjectEventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.StateDomainObjectEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StateDomainObjectEventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStateDomainObjectEventBLL, Framework.Workflow.BLL.StateDomainObjectEventBLL, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>, Framework.Workflow.BLL.IStateDomainObjectEventBLLFactory
    {
        
        public StateDomainObjectEventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StateTimeoutEventBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.StateTimeoutEvent, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStateTimeoutEventBLL
    {
        
		partial void Initialize();
        
        public StateTimeoutEventBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.StateTimeoutEvent> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StateTimeoutEventBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStateTimeoutEventBLL, Framework.Workflow.BLL.StateTimeoutEventBLL, Framework.Workflow.Domain.Definition.StateTimeoutEvent>, Framework.Workflow.BLL.IStateTimeoutEventBLLFactory
    {
        
        public StateTimeoutEventBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TargetSystemBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.TargetSystem, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ITargetSystemBLL
    {
        
		partial void Initialize();
        
        public TargetSystemBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.TargetSystem> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TargetSystemBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ITargetSystemBLL, Framework.Workflow.BLL.TargetSystemBLL, Framework.Workflow.Domain.Definition.TargetSystem>, Framework.Workflow.BLL.ITargetSystemBLLFactory
    {
        
        public TargetSystemBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TaskBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Task, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ITaskBLL
    {
        
		partial void Initialize();
        
        public TaskBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Task> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TaskBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ITaskBLL, Framework.Workflow.BLL.TaskBLL, Framework.Workflow.Domain.Definition.Task>, Framework.Workflow.BLL.ITaskBLLFactory
    {
        
        public TaskBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TransitionBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Transition, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ITransitionBLL
    {
        
		partial void Initialize();
        
        public TransitionBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Transition> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TransitionBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ITransitionBLL, Framework.Workflow.BLL.TransitionBLL, Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.BLL.ITransitionBLLFactory
    {
        
        public TransitionBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.Workflow, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IWorkflowBLL
    {
        
		partial void Initialize();
        
        public WorkflowBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.Workflow> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class WorkflowBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IWorkflowBLL, Framework.Workflow.BLL.WorkflowBLL, Framework.Workflow.Domain.Definition.Workflow>, Framework.Workflow.BLL.IWorkflowBLLFactory
    {
        
        public WorkflowBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowLambdaBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.WorkflowLambda, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IWorkflowLambdaBLL
    {
        
		partial void Initialize();
        
        public WorkflowLambdaBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.WorkflowLambda> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class WorkflowLambdaBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IWorkflowLambdaBLL, Framework.Workflow.BLL.WorkflowLambdaBLL, Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Workflow.BLL.IWorkflowLambdaBLLFactory
    {
        
        public WorkflowLambdaBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowSourceBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Definition.WorkflowSource, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IWorkflowSourceBLL
    {
        
		partial void Initialize();
        
        public WorkflowSourceBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Definition.WorkflowSource> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class WorkflowSourceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IWorkflowSourceBLL, Framework.Workflow.BLL.WorkflowSourceBLL, Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.BLL.IWorkflowSourceBLLFactory
    {
        
        public WorkflowSourceBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class NamedLockBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.NamedLock, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.INamedLockBLL
    {
        
		partial void Initialize();
        
        public NamedLockBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.NamedLock> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class NamedLockBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.INamedLockBLL, Framework.Workflow.BLL.NamedLockBLL, Framework.Workflow.Domain.NamedLock>, Framework.Workflow.BLL.INamedLockBLLFactory
    {
        
        public NamedLockBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class ExecutedCommandBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Runtime.ExecutedCommand, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IExecutedCommandBLL
    {
        
		partial void Initialize();
        
        public ExecutedCommandBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Runtime.ExecutedCommand> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class ExecutedCommandBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IExecutedCommandBLL, Framework.Workflow.BLL.ExecutedCommandBLL, Framework.Workflow.Domain.Runtime.ExecutedCommand>, Framework.Workflow.BLL.IExecutedCommandBLLFactory
    {
        
        public ExecutedCommandBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class StateInstanceBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Runtime.StateInstance, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IStateInstanceBLL
    {
        
		partial void Initialize();
        
        public StateInstanceBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Runtime.StateInstance> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class StateInstanceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IStateInstanceBLL, Framework.Workflow.BLL.StateInstanceBLL, Framework.Workflow.Domain.Runtime.StateInstance>, Framework.Workflow.BLL.IStateInstanceBLLFactory
    {
        
        public StateInstanceBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TaskInstanceBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Runtime.TaskInstance, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ITaskInstanceBLL
    {
        
		partial void Initialize();
        
        public TaskInstanceBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Runtime.TaskInstance> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TaskInstanceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ITaskInstanceBLL, Framework.Workflow.BLL.TaskInstanceBLL, Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.BLL.ITaskInstanceBLLFactory
    {
        
        public TaskInstanceBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class TransitionInstanceBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Runtime.TransitionInstance, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.ITransitionInstanceBLL
    {
        
		partial void Initialize();
        
        public TransitionInstanceBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Runtime.TransitionInstance> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class TransitionInstanceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.ITransitionInstanceBLL, Framework.Workflow.BLL.TransitionInstanceBLL, Framework.Workflow.Domain.Runtime.TransitionInstance>, Framework.Workflow.BLL.ITransitionInstanceBLLFactory
    {
        
        public TransitionInstanceBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowInstanceBLL : Framework.Workflow.BLL.SecurityDomainBLLBase<Framework.Workflow.Domain.Runtime.WorkflowInstance, Framework.DomainDriven.BLL.BLLBaseOperation>, Framework.Workflow.BLL.IWorkflowInstanceBLL
    {
        
		partial void Initialize();
        
        public WorkflowInstanceBLL(Framework.Workflow.BLL.IWorkflowBLLContext context, Framework.SecuritySystem.ISecurityProvider<Framework.Workflow.Domain.Runtime.WorkflowInstance> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
            this.Initialize();
        }
    }
    
    public partial class WorkflowInstanceBLLFactory : Framework.DomainDriven.BLL.Security.SecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.BLL.IWorkflowInstanceBLL, Framework.Workflow.BLL.WorkflowInstanceBLL, Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Workflow.BLL.IWorkflowInstanceBLLFactory
    {
        
        public WorkflowInstanceBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
    }
    
    public partial class WorkflowBLLFactoryContainer : Framework.DomainDriven.BLL.BLLContextContainer<Framework.Workflow.BLL.IWorkflowBLLContext>, Framework.Workflow.BLL.IWorkflowBLLFactoryContainer
    {
        
        private Framework.Workflow.BLL.ICommandBLL commandBLL;
        
        private Framework.Workflow.BLL.ICommandEventBLL commandEventBLL;
        
        private Framework.Workflow.BLL.IConditionStateBLL conditionStateBLL;
        
        private Framework.Workflow.BLL.IConditionStateEventBLL conditionStateEventBLL;
        
        private Framework.Workflow.BLL.WorkflowDefaultBLLFactory defaultBLLFactory;
        
        private Framework.Workflow.BLL.IDomainTypeBLL domainTypeBLL;
        
        private Framework.Workflow.BLL.IEventBLL eventBLL;
        
        private Framework.Workflow.BLL.IExecutedCommandBLL executedCommandBLL;
        
        private Framework.Workflow.BLL.WorkflowImplementedBLLFactory implementedBLLFactory;
        
        private Framework.Workflow.BLL.INamedLockBLL namedLockBLL;
        
        private Framework.Workflow.BLL.IParallelStateBLL parallelStateBLL;
        
        private Framework.Workflow.BLL.IParallelStateFinalEventBLL parallelStateFinalEventBLL;
        
        private Framework.Workflow.BLL.IRoleBLL roleBLL;
        
        private Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL startWorkflowDomainObjectConditionBLL;
        
        private Framework.Workflow.BLL.IStateBaseBLL stateBaseBLL;
        
        private Framework.Workflow.BLL.IStateBLL stateBLL;
        
        private Framework.Workflow.BLL.IStateDomainObjectEventBLL stateDomainObjectEventBLL;
        
        private Framework.Workflow.BLL.IStateInstanceBLL stateInstanceBLL;
        
        private Framework.Workflow.BLL.IStateTimeoutEventBLL stateTimeoutEventBLL;
        
        private Framework.Workflow.BLL.ITargetSystemBLL targetSystemBLL;
        
        private Framework.Workflow.BLL.ITaskBLL taskBLL;
        
        private Framework.Workflow.BLL.ITaskInstanceBLL taskInstanceBLL;
        
        private Framework.Workflow.BLL.ITransitionBLL transitionBLL;
        
        private Framework.Workflow.BLL.ITransitionInstanceBLL transitionInstanceBLL;
        
        private Framework.Workflow.BLL.IWorkflowBLL workflowBLL;
        
        private Framework.Workflow.BLL.IWorkflowInstanceBLL workflowInstanceBLL;
        
        private Framework.Workflow.BLL.IWorkflowLambdaBLL workflowLambdaBLL;
        
        private Framework.Workflow.BLL.IWorkflowSourceBLL workflowSourceBLL;
        
        public WorkflowBLLFactoryContainer(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
        
        public Framework.Workflow.BLL.ICommandBLL Command
        {
            get
            {
                if (object.ReferenceEquals(this.commandBLL, null))
                {
                    this.commandBLL = this.CommandFactory.Create();
                }
                return this.commandBLL;
            }
        }
        
        public Framework.Workflow.BLL.ICommandEventBLL CommandEvent
        {
            get
            {
                if (object.ReferenceEquals(this.commandEventBLL, null))
                {
                    this.commandEventBLL = this.CommandEventFactory.Create();
                }
                return this.commandEventBLL;
            }
        }
        
        public Framework.Workflow.BLL.ICommandEventBLLFactory CommandEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ICommandEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ICommandBLLFactory CommandFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ICommandBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IConditionStateBLL ConditionState
        {
            get
            {
                if (object.ReferenceEquals(this.conditionStateBLL, null))
                {
                    this.conditionStateBLL = this.ConditionStateFactory.Create();
                }
                return this.conditionStateBLL;
            }
        }
        
        public Framework.Workflow.BLL.IConditionStateEventBLL ConditionStateEvent
        {
            get
            {
                if (object.ReferenceEquals(this.conditionStateEventBLL, null))
                {
                    this.conditionStateEventBLL = this.ConditionStateEventFactory.Create();
                }
                return this.conditionStateEventBLL;
            }
        }
        
        public Framework.Workflow.BLL.IConditionStateEventBLLFactory ConditionStateEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IConditionStateEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IConditionStateBLLFactory ConditionStateFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IConditionStateBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid> Default
        {
            get
            {
                if (object.ReferenceEquals(this.defaultBLLFactory, null))
                {
                    this.defaultBLLFactory = new Framework.Workflow.BLL.WorkflowDefaultBLLFactory(this.Context);
                }
                return this.defaultBLLFactory;
            }
        }
        
        public Framework.Workflow.BLL.IDomainTypeBLL DomainType
        {
            get
            {
                if (object.ReferenceEquals(this.domainTypeBLL, null))
                {
                    this.domainTypeBLL = this.DomainTypeFactory.Create();
                }
                return this.domainTypeBLL;
            }
        }
        
        public Framework.Workflow.BLL.IDomainTypeBLLFactory DomainTypeFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IDomainTypeBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IEventBLL Event
        {
            get
            {
                if (object.ReferenceEquals(this.eventBLL, null))
                {
                    this.eventBLL = this.EventFactory.Create();
                }
                return this.eventBLL;
            }
        }
        
        public Framework.Workflow.BLL.IEventBLLFactory EventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IExecutedCommandBLL ExecutedCommand
        {
            get
            {
                if (object.ReferenceEquals(this.executedCommandBLL, null))
                {
                    this.executedCommandBLL = this.ExecutedCommandFactory.Create();
                }
                return this.executedCommandBLL;
            }
        }
        
        public Framework.Workflow.BLL.IExecutedCommandBLLFactory ExecutedCommandFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IExecutedCommandBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid> Implemented
        {
            get
            {
                if (object.ReferenceEquals(this.implementedBLLFactory, null))
                {
                    this.implementedBLLFactory = new Framework.Workflow.BLL.WorkflowImplementedBLLFactory(this.Context);
                }
                return this.implementedBLLFactory;
            }
        }
        
        public Framework.Workflow.BLL.INamedLockBLL NamedLock
        {
            get
            {
                if (object.ReferenceEquals(this.namedLockBLL, null))
                {
                    this.namedLockBLL = this.NamedLockFactory.Create();
                }
                return this.namedLockBLL;
            }
        }
        
        public Framework.Workflow.BLL.INamedLockBLLFactory NamedLockFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.INamedLockBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IParallelStateBLL ParallelState
        {
            get
            {
                if (object.ReferenceEquals(this.parallelStateBLL, null))
                {
                    this.parallelStateBLL = this.ParallelStateFactory.Create();
                }
                return this.parallelStateBLL;
            }
        }
        
        public Framework.Workflow.BLL.IParallelStateBLLFactory ParallelStateFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IParallelStateBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IParallelStateFinalEventBLL ParallelStateFinalEvent
        {
            get
            {
                if (object.ReferenceEquals(this.parallelStateFinalEventBLL, null))
                {
                    this.parallelStateFinalEventBLL = this.ParallelStateFinalEventFactory.Create();
                }
                return this.parallelStateFinalEventBLL;
            }
        }
        
        public Framework.Workflow.BLL.IParallelStateFinalEventBLLFactory ParallelStateFinalEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IParallelStateFinalEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IRoleBLL Role
        {
            get
            {
                if (object.ReferenceEquals(this.roleBLL, null))
                {
                    this.roleBLL = this.RoleFactory.Create();
                }
                return this.roleBLL;
            }
        }
        
        public Framework.Workflow.BLL.IRoleBLLFactory RoleFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IRoleBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLL StartWorkflowDomainObjectCondition
        {
            get
            {
                if (object.ReferenceEquals(this.startWorkflowDomainObjectConditionBLL, null))
                {
                    this.startWorkflowDomainObjectConditionBLL = this.StartWorkflowDomainObjectConditionFactory.Create();
                }
                return this.startWorkflowDomainObjectConditionBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLLFactory StartWorkflowDomainObjectConditionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStateBLL State
        {
            get
            {
                if (object.ReferenceEquals(this.stateBLL, null))
                {
                    this.stateBLL = this.StateFactory.Create();
                }
                return this.stateBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStateBaseBLL StateBase
        {
            get
            {
                if (object.ReferenceEquals(this.stateBaseBLL, null))
                {
                    this.stateBaseBLL = this.StateBaseFactory.Create();
                }
                return this.stateBaseBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStateBaseBLLFactory StateBaseFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStateBaseBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStateDomainObjectEventBLL StateDomainObjectEvent
        {
            get
            {
                if (object.ReferenceEquals(this.stateDomainObjectEventBLL, null))
                {
                    this.stateDomainObjectEventBLL = this.StateDomainObjectEventFactory.Create();
                }
                return this.stateDomainObjectEventBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStateDomainObjectEventBLLFactory StateDomainObjectEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStateDomainObjectEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStateBLLFactory StateFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStateBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStateInstanceBLL StateInstance
        {
            get
            {
                if (object.ReferenceEquals(this.stateInstanceBLL, null))
                {
                    this.stateInstanceBLL = this.StateInstanceFactory.Create();
                }
                return this.stateInstanceBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStateInstanceBLLFactory StateInstanceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStateInstanceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IStateTimeoutEventBLL StateTimeoutEvent
        {
            get
            {
                if (object.ReferenceEquals(this.stateTimeoutEventBLL, null))
                {
                    this.stateTimeoutEventBLL = this.StateTimeoutEventFactory.Create();
                }
                return this.stateTimeoutEventBLL;
            }
        }
        
        public Framework.Workflow.BLL.IStateTimeoutEventBLLFactory StateTimeoutEventFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IStateTimeoutEventBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ITargetSystemBLL TargetSystem
        {
            get
            {
                if (object.ReferenceEquals(this.targetSystemBLL, null))
                {
                    this.targetSystemBLL = this.TargetSystemFactory.Create();
                }
                return this.targetSystemBLL;
            }
        }
        
        public Framework.Workflow.BLL.ITargetSystemBLLFactory TargetSystemFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ITargetSystemBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ITaskBLL Task
        {
            get
            {
                if (object.ReferenceEquals(this.taskBLL, null))
                {
                    this.taskBLL = this.TaskFactory.Create();
                }
                return this.taskBLL;
            }
        }
        
        public Framework.Workflow.BLL.ITaskBLLFactory TaskFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ITaskBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ITaskInstanceBLL TaskInstance
        {
            get
            {
                if (object.ReferenceEquals(this.taskInstanceBLL, null))
                {
                    this.taskInstanceBLL = this.TaskInstanceFactory.Create();
                }
                return this.taskInstanceBLL;
            }
        }
        
        public Framework.Workflow.BLL.ITaskInstanceBLLFactory TaskInstanceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ITaskInstanceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ITransitionBLL Transition
        {
            get
            {
                if (object.ReferenceEquals(this.transitionBLL, null))
                {
                    this.transitionBLL = this.TransitionFactory.Create();
                }
                return this.transitionBLL;
            }
        }
        
        public Framework.Workflow.BLL.ITransitionBLLFactory TransitionFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ITransitionBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.ITransitionInstanceBLL TransitionInstance
        {
            get
            {
                if (object.ReferenceEquals(this.transitionInstanceBLL, null))
                {
                    this.transitionInstanceBLL = this.TransitionInstanceFactory.Create();
                }
                return this.transitionInstanceBLL;
            }
        }
        
        public Framework.Workflow.BLL.ITransitionInstanceBLLFactory TransitionInstanceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.ITransitionInstanceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowBLL Workflow
        {
            get
            {
                if (object.ReferenceEquals(this.workflowBLL, null))
                {
                    this.workflowBLL = this.WorkflowFactory.Create();
                }
                return this.workflowBLL;
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowBLLFactory WorkflowFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IWorkflowBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowInstanceBLL WorkflowInstance
        {
            get
            {
                if (object.ReferenceEquals(this.workflowInstanceBLL, null))
                {
                    this.workflowInstanceBLL = this.WorkflowInstanceFactory.Create();
                }
                return this.workflowInstanceBLL;
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowInstanceBLLFactory WorkflowInstanceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IWorkflowInstanceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowLambdaBLL WorkflowLambda
        {
            get
            {
                if (object.ReferenceEquals(this.workflowLambdaBLL, null))
                {
                    this.workflowLambdaBLL = this.WorkflowLambdaFactory.Create();
                }
                return this.workflowLambdaBLL;
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowLambdaBLLFactory WorkflowLambdaFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IWorkflowLambdaBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowSourceBLL WorkflowSource
        {
            get
            {
                if (object.ReferenceEquals(this.workflowSourceBLL, null))
                {
                    this.workflowSourceBLL = this.WorkflowSourceFactory.Create();
                }
                return this.workflowSourceBLL;
            }
        }
        
        public Framework.Workflow.BLL.IWorkflowSourceBLLFactory WorkflowSourceFactory
        {
            get
            {
                return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Framework.Workflow.BLL.IWorkflowSourceBLLFactory>(this.Context.ServiceProvider);
            }
        }
        
        public static void RegisterBLLFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
        {
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ICommandBLLFactory, Framework.Workflow.BLL.CommandBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Command, System.Guid>, Framework.Workflow.Domain.Definition.Command>, Framework.Workflow.BLL.ICommandBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ICommandEventBLLFactory, Framework.Workflow.BLL.CommandEventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.CommandEvent, System.Guid>, Framework.Workflow.Domain.Definition.CommandEvent>, Framework.Workflow.BLL.ICommandEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IConditionStateBLLFactory, Framework.Workflow.BLL.ConditionStateBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.ConditionState, System.Guid>, Framework.Workflow.Domain.Definition.ConditionState>, Framework.Workflow.BLL.IConditionStateBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IConditionStateEventBLLFactory, Framework.Workflow.BLL.ConditionStateEventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.ConditionStateEvent, System.Guid>, Framework.Workflow.Domain.Definition.ConditionStateEvent>, Framework.Workflow.BLL.IConditionStateEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IDomainTypeBLLFactory, Framework.Workflow.BLL.DomainTypeBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.DomainType, System.Guid>, Framework.Workflow.Domain.Definition.DomainType>, Framework.Workflow.BLL.IDomainTypeBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IEventBLLFactory, Framework.Workflow.BLL.EventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Event, System.Guid>, Framework.Workflow.Domain.Definition.Event>, Framework.Workflow.BLL.IEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IParallelStateBLLFactory, Framework.Workflow.BLL.ParallelStateBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.ParallelState, System.Guid>, Framework.Workflow.Domain.Definition.ParallelState>, Framework.Workflow.BLL.IParallelStateBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IParallelStateFinalEventBLLFactory, Framework.Workflow.BLL.ParallelStateFinalEventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent, System.Guid>, Framework.Workflow.Domain.Definition.ParallelStateFinalEvent>, Framework.Workflow.BLL.IParallelStateFinalEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IRoleBLLFactory, Framework.Workflow.BLL.RoleBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Role, System.Guid>, Framework.Workflow.Domain.Definition.Role>, Framework.Workflow.BLL.IRoleBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLLFactory, Framework.Workflow.BLL.StartWorkflowDomainObjectConditionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition, System.Guid>, Framework.Workflow.Domain.Definition.StartWorkflowDomainObjectCondition>, Framework.Workflow.BLL.IStartWorkflowDomainObjectConditionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStateBLLFactory, Framework.Workflow.BLL.StateBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.State, System.Guid>, Framework.Workflow.Domain.Definition.State>, Framework.Workflow.BLL.IStateBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStateBaseBLLFactory, Framework.Workflow.BLL.StateBaseBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.StateBase, System.Guid>, Framework.Workflow.Domain.Definition.StateBase>, Framework.Workflow.BLL.IStateBaseBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStateDomainObjectEventBLLFactory, Framework.Workflow.BLL.StateDomainObjectEventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.StateDomainObjectEvent, System.Guid>, Framework.Workflow.Domain.Definition.StateDomainObjectEvent>, Framework.Workflow.BLL.IStateDomainObjectEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStateTimeoutEventBLLFactory, Framework.Workflow.BLL.StateTimeoutEventBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.StateTimeoutEvent, System.Guid>, Framework.Workflow.Domain.Definition.StateTimeoutEvent>, Framework.Workflow.BLL.IStateTimeoutEventBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ITargetSystemBLLFactory, Framework.Workflow.BLL.TargetSystemBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.TargetSystem, System.Guid>, Framework.Workflow.Domain.Definition.TargetSystem>, Framework.Workflow.BLL.ITargetSystemBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ITaskBLLFactory, Framework.Workflow.BLL.TaskBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Task, System.Guid>, Framework.Workflow.Domain.Definition.Task>, Framework.Workflow.BLL.ITaskBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ITransitionBLLFactory, Framework.Workflow.BLL.TransitionBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Transition, System.Guid>, Framework.Workflow.Domain.Definition.Transition>, Framework.Workflow.BLL.ITransitionBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IWorkflowBLLFactory, Framework.Workflow.BLL.WorkflowBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.Workflow, System.Guid>, Framework.Workflow.Domain.Definition.Workflow>, Framework.Workflow.BLL.IWorkflowBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IWorkflowLambdaBLLFactory, Framework.Workflow.BLL.WorkflowLambdaBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.WorkflowLambda, System.Guid>, Framework.Workflow.Domain.Definition.WorkflowLambda>, Framework.Workflow.BLL.IWorkflowLambdaBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IWorkflowSourceBLLFactory, Framework.Workflow.BLL.WorkflowSourceBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Definition.WorkflowSource, System.Guid>, Framework.Workflow.Domain.Definition.WorkflowSource>, Framework.Workflow.BLL.IWorkflowSourceBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.INamedLockBLLFactory, Framework.Workflow.BLL.NamedLockBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.NamedLock, System.Guid>, Framework.Workflow.Domain.NamedLock>, Framework.Workflow.BLL.INamedLockBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IExecutedCommandBLLFactory, Framework.Workflow.BLL.ExecutedCommandBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.ExecutedCommand, System.Guid>, Framework.Workflow.Domain.Runtime.ExecutedCommand>, Framework.Workflow.BLL.IExecutedCommandBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IStateInstanceBLLFactory, Framework.Workflow.BLL.StateInstanceBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.StateInstance, System.Guid>, Framework.Workflow.Domain.Runtime.StateInstance>, Framework.Workflow.BLL.IStateInstanceBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ITaskInstanceBLLFactory, Framework.Workflow.BLL.TaskInstanceBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.TaskInstance, System.Guid>, Framework.Workflow.Domain.Runtime.TaskInstance>, Framework.Workflow.BLL.ITaskInstanceBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.ITransitionInstanceBLLFactory, Framework.Workflow.BLL.TransitionInstanceBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.TransitionInstance, System.Guid>, Framework.Workflow.Domain.Runtime.TransitionInstance>, Framework.Workflow.BLL.ITransitionInstanceBLLFactory>(serviceCollection);
            Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<Framework.Workflow.BLL.IWorkflowInstanceBLLFactory, Framework.Workflow.BLL.WorkflowInstanceBLLFactory>(serviceCollection);
            Framework.DependencyInjection.ServiceCollectionExtensions.AddScopedFrom<Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, Framework.Workflow.Domain.Runtime.WorkflowInstance, System.Guid>, Framework.Workflow.Domain.Runtime.WorkflowInstance>, Framework.Workflow.BLL.IWorkflowInstanceBLLFactory>(serviceCollection);
        }
    }
    
    public partial class WorkflowDefaultBLLFactory : Framework.DomainDriven.BLL.Security.DefaultSecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public WorkflowDefaultBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
        
        public override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> Create<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            return new Framework.Workflow.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context, securityProvider);
        }
    }
    
    public partial class WorkflowImplementedBLLFactory : Framework.DomainDriven.BLL.Security.ImplementedSecurityBLLFactory<Framework.Workflow.BLL.IWorkflowBLLContext, Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid>, Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Workflow.Domain.PersistentDomainObjectBase, System.Guid>
    {
        
        public WorkflowImplementedBLLFactory(Framework.Workflow.BLL.IWorkflowBLLContext context) : 
                base(context)
        {
        }
        
        protected override Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Workflow.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid> CreateDefault<TDomainObject>(Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider)
        {
            return new Framework.Workflow.BLL.SecurityDomainBLLBase<TDomainObject>(this.Context, securityProvider);
        }
    }
}
